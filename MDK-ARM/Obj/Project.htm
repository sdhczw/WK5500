<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Obj\Project.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Obj\Project.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5.03 [Build 76]: Last Updated: Fri Jan 15 14:48:54 2016
<BR><P>
<H3>Maximum Stack Usage =       1104 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
HF_SendDataToMoudle &rArr; AC_RecvMessage &rArr; AC_DealNotifyMessage &rArr; AC_ConfigWifi &rArr; AC_SendMessage &rArr; ZC_RecvDataFromMoudle &rArr; PCT_HandleMoudleEvent &rArr; PCT_SendEmptyMsg &rArr; PCT_SendMsgToCloud &rArr; SEC_Encrypt &rArr; SEC_EncryptTextByRsa &rArr; rsa_pkcs1_encrypt &rArr; rsa_public &rArr; mpi_exp_mod &rArr; mpi_mod_mpi &rArr; mpi_div_mpi &rArr; mpi_mul_int &rArr; mpi_mul_mpi &rArr; mpi_copy &rArr; mpi_grow
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1c]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC1_2_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC1_2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[39]">ADC3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from stm32f10x_it.o(i.BusFault_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1f]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[20]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[15]">DMA1_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[16]">DMA1_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[17]">DMA1_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[18]">DMA1_Channel4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[19]">DMA1_Channel5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel6_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel7_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[42]">DMA2_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[43]">DMA2_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[44]">DMA2_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[45]">DMA2_Channel4_5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from stm32f10x_it.o(i.DebugMon_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3a]">FSMC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[49]">HF_ConnectToCloud</a> from zc_adapter.o(i.HF_ConnectToCloud) referenced from zc_adapter.o(i.ZC_Init)
 <LI><a href="#[4d]">HF_FirmwareUpdate</a> from zc_adapter.o(i.HF_FirmwareUpdate) referenced from zc_adapter.o(i.ZC_Init)
 <LI><a href="#[51]">HF_FirmwareUpdateFinish</a> from zc_adapter.o(i.HF_FirmwareUpdateFinish) referenced from zc_adapter.o(i.ZC_Init)
 <LI><a href="#[54]">HF_GetMac</a> from zc_adapter.o(i.HF_GetMac) referenced from zc_adapter.o(i.ZC_Init)
 <LI><a href="#[4a]">HF_ListenClient</a> from zc_adapter.o(i.HF_ListenClient) referenced from zc_adapter.o(i.ZC_Init)
 <LI><a href="#[55]">HF_Reboot</a> from zc_adapter.o(i.HF_Reboot) referenced from zc_adapter.o(i.ZC_Init)
 <LI><a href="#[53]">HF_Rest</a> from zc_adapter.o(i.HF_Rest) referenced from zc_adapter.o(i.ZC_Init)
 <LI><a href="#[4e]">HF_SendDataToMoudle</a> from zc_adapter.o(i.HF_SendDataToMoudle) referenced from zc_adapter.o(i.ZC_Init)
 <LI><a href="#[4b]">HF_SendTcpData</a> from zc_adapter.o(i.HF_SendTcpData) referenced from zc_adapter.o(i.ZC_Init)
 <LI><a href="#[4c]">HF_SendUdpData</a> from zc_adapter.o(i.HF_SendUdpData) referenced from zc_adapter.o(i.ZC_Init)
 <LI><a href="#[4f]">HF_SetTimer</a> from zc_adapter.o(i.HF_SetTimer) referenced from zc_adapter.o(i.ZC_Init)
 <LI><a href="#[50]">HF_StopTimer</a> from zc_adapter.o(i.HF_StopTimer) referenced from zc_adapter.o(i.ZC_Init)
 <LI><a href="#[52]">HF_WriteDataToFlash</a> from zc_adapter.o(i.HF_WriteDataToFlash) referenced from zc_adapter.o(i.ZC_Init)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32f10x_it.o(i.HardFault_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from stm32f10x_it.o(i.MemManage_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from stm32f10x_it.o(i.NMI_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from stm32f10x_it.o(i.PendSV_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[33]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[d]">RTC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3b]">SDIO_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3d]">SPI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from stm32f10x_it.o(i.SVC_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from stm32f10x_it.o(i.SysTick_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[47]">SystemInit</a> from system_stm32f10x.o(i.SystemInit) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[c]">TAMPER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[23]">TIM1_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from stm32f10x_it.o(i.TIM2_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from stm32f10x_it.o(i.TIM3_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3c]">TIM5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[40]">TIM6_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[41]">TIM7_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[35]">TIM8_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[38]">TIM8_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[37]">TIM8_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[36]">TIM8_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3e]">UART4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3f]">UART5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from stm32f10x_it.o(i.USART1_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from stm32f10x_it.o(i.USART2_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from util.o(i.USART3_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[34]">USBWakeUp_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1d]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1e]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from stm32f10x_it.o(i.UsageFault_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[48]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[59]">fputc</a> from util.o(i.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[57]">free</a> from malloc.o(i.free) referenced from zc_adapter.o(i.ZC_Init)
 <LI><a href="#[46]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[56]">malloc</a> from malloc.o(i.malloc) referenced from zc_adapter.o(i.ZC_Init)
 <LI><a href="#[58]">printf</a> from printfa.o(i.__0printf) referenced from zc_adapter.o(i.ZC_Init)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[48]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(.text)
</UL>
<P><STRONG><a name="[16f]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[5a]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[6b]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[170]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[171]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[172]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[173]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[174]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[9e]"></a>rand</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_pkcs1_encrypt
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_SendUnbindMsg
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZC_Rand
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loopback_tcpc
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_ConnectToCloud
</UL>

<P><STRONG><a name="[175]"></a>srand</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rand.o(.text), UNUSED)

<P><STRONG><a name="[6e]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSG_RecvData
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVENT_BuildMsg
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVENT_BuildBcMsg
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_pkcs1_encrypt
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_pkcs1_decrypt
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEC_Encrypt
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_SendCloudAccessMsg1
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_RecvAccessMsg2
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZC_DealSessionOpt
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEC_Decrypt
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSG_RecvDataFromCloud
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZC_StoreTokenKey
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZC_StoreRegisterInfo
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZC_ConfigInitPara
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVENT_BuildOption
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_SendDeviceRegsiterWithMac
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_BuildOption
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_BuildMessage
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_cbc_core
</UL>

<P><STRONG><a name="[71]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_ReadDataFormFlash
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVENT_BuildBcMsg
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_exp_mod
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_copy
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montmul
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_SendCloudAccessMsg3
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_SendCloudAccessMsg1
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_HandleMoudleMsg
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZC_ConfigPara
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZC_ConfigInitPara
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_ConfigWifi
</UL>

<P><STRONG><a name="[176]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[5d]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZC_StoreRegisterInfo
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_BcInit
</UL>

<P><STRONG><a name="[177]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[178]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[5c]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_write_binary
</UL>

<P><STRONG><a name="[155]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_lset
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_init
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_grow
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_free
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_exp_mod
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_copy
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montmul
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_init
</UL>

<P><STRONG><a name="[179]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[5e]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[df]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_RecvAccessMsg4
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_RecvAccessMsg2
</UL>

<P><STRONG><a name="[17a]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[13b]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[5f]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[17b]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[62]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[66]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[67]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[68]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[69]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[6a]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[138]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[5b]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[17c]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[61]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[17d]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[60]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[17e]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[63]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[17f]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[65]"></a>_double_round</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[64]"></a>_double_epilogue</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[180]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[181]"></a>__decompress1</STRONG> (Thumb, 92 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[75]"></a>AC_BlinkLed</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ac_hal.o(i.AC_BlinkLed))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_DealLed
</UL>

<P><STRONG><a name="[6c]"></a>AC_BuildMessage</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, ac_api.o(i.AC_BuildMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = AC_BuildMessage &rArr; AC_BuildOption
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16_ccitt
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_BuildOption
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_DealLed
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_ConfigWifi
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_SendDeviceRegsiterWithMac
</UL>

<P><STRONG><a name="[6d]"></a>AC_BuildOption</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, ac_api.o(i.AC_BuildOption))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = AC_BuildOption
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_BuildMessage
</UL>

<P><STRONG><a name="[70]"></a>AC_ConfigWifi</STRONG> (Thumb, 96 bytes, Stack size 248 bytes, ac_hal.o(i.AC_ConfigWifi))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048<LI>Call Chain = AC_ConfigWifi &rArr; AC_SendMessage &rArr; ZC_RecvDataFromMoudle &rArr; PCT_HandleMoudleEvent &rArr; PCT_SendEmptyMsg &rArr; PCT_SendMsgToCloud &rArr; SEC_Encrypt &rArr; SEC_EncryptTextByRsa &rArr; rsa_pkcs1_encrypt &rArr; rsa_public &rArr; mpi_exp_mod &rArr; mpi_mod_mpi &rArr; mpi_div_mpi &rArr; mpi_mul_int &rArr; mpi_mul_mpi &rArr; mpi_copy &rArr; mpi_grow
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_SendMessage
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_BuildMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_DealNotifyMessage
</UL>

<P><STRONG><a name="[73]"></a>AC_DealEvent</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, ac_hal.o(i.AC_DealEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 856<LI>Call Chain = AC_DealEvent &rArr; AC_DealLed &rArr; AC_SendMessage &rArr; ZC_RecvDataFromMoudle &rArr; PCT_HandleMoudleEvent &rArr; PCT_SendEmptyMsg &rArr; PCT_SendMsgToCloud &rArr; SEC_Encrypt &rArr; SEC_EncryptTextByRsa &rArr; rsa_pkcs1_encrypt &rArr; rsa_public &rArr; mpi_exp_mod &rArr; mpi_mod_mpi &rArr; mpi_div_mpi &rArr; mpi_mul_int &rArr; mpi_mul_mpi &rArr; mpi_copy &rArr; mpi_grow
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_DealLed
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_RecvMessage
</UL>

<P><STRONG><a name="[74]"></a>AC_DealLed</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, ac_hal.o(i.AC_DealLed))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = AC_DealLed &rArr; AC_SendMessage &rArr; ZC_RecvDataFromMoudle &rArr; PCT_HandleMoudleEvent &rArr; PCT_SendEmptyMsg &rArr; PCT_SendMsgToCloud &rArr; SEC_Encrypt &rArr; SEC_EncryptTextByRsa &rArr; rsa_pkcs1_encrypt &rArr; rsa_public &rArr; mpi_exp_mod &rArr; mpi_mod_mpi &rArr; mpi_div_mpi &rArr; mpi_mul_int &rArr; mpi_mul_mpi &rArr; mpi_copy &rArr; mpi_grow
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_BlinkLed
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_SendMessage
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_BuildMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_DealEvent
</UL>

<P><STRONG><a name="[76]"></a>AC_DealNotifyMessage</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, ac_hal.o(i.AC_DealNotifyMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 1064<LI>Call Chain = AC_DealNotifyMessage &rArr; AC_ConfigWifi &rArr; AC_SendMessage &rArr; ZC_RecvDataFromMoudle &rArr; PCT_HandleMoudleEvent &rArr; PCT_SendEmptyMsg &rArr; PCT_SendMsgToCloud &rArr; SEC_Encrypt &rArr; SEC_EncryptTextByRsa &rArr; rsa_pkcs1_encrypt &rArr; rsa_public &rArr; mpi_exp_mod &rArr; mpi_mod_mpi &rArr; mpi_div_mpi &rArr; mpi_mul_int &rArr; mpi_mul_mpi &rArr; mpi_copy &rArr; mpi_grow
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_StoreStatus
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_ConfigWifi
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_SendDeviceRegsiterWithMac
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_RecvMessage
</UL>

<P><STRONG><a name="[7a]"></a>AC_ParseOption</STRONG> (Thumb, 98 bytes, Stack size 20 bytes, ac_api.o(i.AC_ParseOption))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = AC_ParseOption
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_RecvMessage
</UL>

<P><STRONG><a name="[79]"></a>AC_RecvMessage</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, ac_api.o(i.AC_RecvMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 1088<LI>Call Chain = AC_RecvMessage &rArr; AC_DealNotifyMessage &rArr; AC_ConfigWifi &rArr; AC_SendMessage &rArr; ZC_RecvDataFromMoudle &rArr; PCT_HandleMoudleEvent &rArr; PCT_SendEmptyMsg &rArr; PCT_SendMsgToCloud &rArr; SEC_Encrypt &rArr; SEC_EncryptTextByRsa &rArr; rsa_pkcs1_encrypt &rArr; rsa_public &rArr; mpi_exp_mod &rArr; mpi_mod_mpi &rArr; mpi_div_mpi &rArr; mpi_mul_int &rArr; mpi_mul_mpi &rArr; mpi_copy &rArr; mpi_grow
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_DealNotifyMessage
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_DealEvent
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_ParseOption
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_SendDataToMoudle
</UL>

<P><STRONG><a name="[78]"></a>AC_SendDeviceRegsiterWithMac</STRONG> (Thumb, 76 bytes, Stack size 192 bytes, ac_api.o(i.AC_SendDeviceRegsiterWithMac))
<BR><BR>[Stack]<UL><LI>Max Depth = 992<LI>Call Chain = AC_SendDeviceRegsiterWithMac &rArr; AC_SendMessage &rArr; ZC_RecvDataFromMoudle &rArr; PCT_HandleMoudleEvent &rArr; PCT_SendEmptyMsg &rArr; PCT_SendMsgToCloud &rArr; SEC_Encrypt &rArr; SEC_EncryptTextByRsa &rArr; rsa_pkcs1_encrypt &rArr; rsa_public &rArr; mpi_exp_mod &rArr; mpi_mod_mpi &rArr; mpi_div_mpi &rArr; mpi_mul_int &rArr; mpi_mul_mpi &rArr; mpi_copy &rArr; mpi_grow
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_SendMessage
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_BuildMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_DealNotifyMessage
</UL>

<P><STRONG><a name="[72]"></a>AC_SendMessage</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, ac_api.o(i.AC_SendMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 800<LI>Call Chain = AC_SendMessage &rArr; ZC_RecvDataFromMoudle &rArr; PCT_HandleMoudleEvent &rArr; PCT_SendEmptyMsg &rArr; PCT_SendMsgToCloud &rArr; SEC_Encrypt &rArr; SEC_EncryptTextByRsa &rArr; rsa_pkcs1_encrypt &rArr; rsa_public &rArr; mpi_exp_mod &rArr; mpi_mod_mpi &rArr; mpi_div_mpi &rArr; mpi_mul_int &rArr; mpi_mul_mpi &rArr; mpi_copy &rArr; mpi_grow
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZC_RecvDataFromMoudle
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_DealLed
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_ConfigWifi
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_SendDeviceRegsiterWithMac
</UL>

<P><STRONG><a name="[77]"></a>AC_StoreStatus</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ac_hal.o(i.AC_StoreStatus))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_DealNotifyMessage
</UL>

<P><STRONG><a name="[7c]"></a>AES_CBC_Decrypt</STRONG> (Thumb, 68 bytes, Stack size 296 bytes, aes_cbc.o(i.AES_CBC_Decrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = AES_CBC_Decrypt &rArr; AES_cbc_core &rArr; AES_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_set_decrypt_key
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_cbc_core
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEC_AesDecrypt
</UL>

<P><STRONG><a name="[7f]"></a>AES_CBC_Encrypt</STRONG> (Thumb, 68 bytes, Stack size 296 bytes, aes_cbc.o(i.AES_CBC_Encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = AES_CBC_Encrypt &rArr; AES_cbc_core &rArr; AES_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_set_encrypt_key
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_cbc_core
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEC_AesEncrypt
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZC_DealSessionOpt
</UL>

<P><STRONG><a name="[7e]"></a>AES_cbc_core</STRONG> (Thumb, 478 bytes, Stack size 72 bytes, aes_cbc.o(i.AES_cbc_core))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = AES_cbc_core &rArr; AES_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_encrypt
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_decrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CBC_Encrypt
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CBC_Decrypt
</UL>

<P><STRONG><a name="[82]"></a>AES_decrypt</STRONG> (Thumb, 1164 bytes, Stack size 52 bytes, aes_core.o(i.AES_decrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = AES_decrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_cbc_core
</UL>

<P><STRONG><a name="[81]"></a>AES_encrypt</STRONG> (Thumb, 1164 bytes, Stack size 52 bytes, aes_core.o(i.AES_encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = AES_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_cbc_core
</UL>

<P><STRONG><a name="[7d]"></a>AES_set_decrypt_key</STRONG> (Thumb, 460 bytes, Stack size 36 bytes, aes_core.o(i.AES_set_decrypt_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = AES_set_decrypt_key &rArr; AES_set_encrypt_key
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_set_encrypt_key
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CBC_Decrypt
</UL>

<P><STRONG><a name="[80]"></a>AES_set_encrypt_key</STRONG> (Thumb, 708 bytes, Stack size 20 bytes, aes_core.o(i.AES_set_encrypt_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = AES_set_encrypt_key
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CBC_Encrypt
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_set_decrypt_key
</UL>

<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>Delay_ms</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, util.o(i.Delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Delay_ms &rArr; delay_ms &rArr; SysTick_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_W5500
</UL>

<P><STRONG><a name="[85]"></a>Delay_us</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, util.o(i.Delay_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Delay_us &rArr; delay_us &rArr; SysTick_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_W5500
</UL>

<P><STRONG><a name="[14c]"></a>Dhcp_Task</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(i.Dhcp_Task))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9d]"></a>Dns_Task</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(i.Dns_Task))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_ConnectToCloud
</UL>

<P><STRONG><a name="[87]"></a>EVENT_BuildBcMsg</STRONG> (Thumb, 114 bytes, Stack size 80 bytes, zc_cloud_event.o(i.EVENT_BuildBcMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = EVENT_BuildBcMsg &rArr; crc16_ccitt &rArr; crc_cal_by_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16_ccitt
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZC_GetStoreInfor
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZC_SendBc
</UL>

<P><STRONG><a name="[89]"></a>EVENT_BuildEmptyMsg</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, zc_cloud_event.o(i.EVENT_BuildEmptyMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = EVENT_BuildEmptyMsg &rArr; crc16_ccitt &rArr; crc_cal_by_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16_ccitt
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_SendEmptyMsg
</UL>

<P><STRONG><a name="[8a]"></a>EVENT_BuildHeartMsg</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, zc_cloud_event.o(i.EVENT_BuildHeartMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = EVENT_BuildHeartMsg &rArr; crc16_ccitt &rArr; crc_cal_by_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16_ccitt
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_SendHeartMsg
</UL>

<P><STRONG><a name="[8b]"></a>EVENT_BuildMsg</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, zc_cloud_event.o(i.EVENT_BuildMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = EVENT_BuildMsg &rArr; crc16_ccitt &rArr; crc_cal_by_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16_ccitt
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_SendUnbindMsg
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_SendErrorMsg
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_SendCloudAccessMsg3
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_SendCloudAccessMsg1
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_SendAckToCloud
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_SendNotifyMsg
</UL>

<P><STRONG><a name="[8c]"></a>EVENT_BuildOption</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, zc_cloud_event.o(i.EVENT_BuildOption))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EVENT_BuildOption
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZC_DealSessionOpt
</UL>

<P><STRONG><a name="[132]"></a>EVENT_ParseOption</STRONG> (Thumb, 98 bytes, Stack size 20 bytes, zc_cloud_event.o(i.EVENT_ParseOption))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = EVENT_ParseOption
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZC_RecvDataFromMoudle
</UL>

<P><STRONG><a name="[8f]"></a>FLASH_GetBank1Status</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32f10x_flash.o(i.FLASH_GetBank1Status))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[ef]"></a>FLASH_PrefetchBufferCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_flash.o(i.FLASH_PrefetchBufferCmd))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[8d]"></a>FLASH_ProgramWord</STRONG> (Thumb, 102 bytes, Stack size 20 bytes, stm32f10x_flash.o(i.FLASH_ProgramWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FLASH_ProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_WriteDataToFlash
</UL>

<P><STRONG><a name="[f0]"></a>FLASH_SetLatency</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_flash.o(i.FLASH_SetLatency))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[8e]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 38 bytes, Stack size 4 bytes, stm32f10x_flash.o(i.FLASH_WaitForLastOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetBank1Status
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
</UL>

<P><STRONG><a name="[90]"></a>GPIO_Configuration</STRONG> (Thumb, 220 bytes, Stack size 8 bytes, main.o(i.GPIO_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GPIO_Configuration &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[91]"></a>GPIO_Init</STRONG> (Thumb, 274 bytes, Stack size 24 bytes, stm32f10x_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_GPIO_Configuration
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
</UL>

<P><STRONG><a name="[fb]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_W5500
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZ_CS
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
</UL>

<P><STRONG><a name="[92]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_W5500
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZ_CS
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
</UL>

<P><STRONG><a name="[93]"></a>Get_ChipInfo</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, main.o(i.Get_ChipInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Get_ChipInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[95]"></a>HF_BcInit</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, zc_adapter.o(i.HF_BcInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HF_BcInit &rArr; socket &rArr; close &rArr; IINCHIP_WRITE &rArr; IINCHIP_SpiSendData &rArr; SPI2_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSn_SR
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Cloudfunc
</UL>

<P><STRONG><a name="[98]"></a>HF_Cloudfunc</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, zc_adapter.o(i.HF_Cloudfunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = HF_Cloudfunc &rArr; loopback_tcpc &rArr; PCT_SendCloudAccessMsg1 &rArr; PCT_SendMsgToCloud &rArr; SEC_Encrypt &rArr; SEC_EncryptTextByRsa &rArr; rsa_pkcs1_encrypt &rArr; rsa_public &rArr; mpi_exp_mod &rArr; mpi_mod_mpi &rArr; mpi_div_mpi &rArr; mpi_mul_int &rArr; mpi_mul_mpi &rArr; mpi_copy &rArr; mpi_grow
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZC_SendBc
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_Run
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loopback_tcpc
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZC_TimerExpired
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_BcInit
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[49]"></a>HF_ConnectToCloud</STRONG> (Thumb, 228 bytes, Stack size 32 bytes, zc_adapter.o(i.HF_ConnectToCloud))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HF_ConnectToCloud &rArr; socket &rArr; close &rArr; IINCHIP_WRITE &rArr; IINCHIP_SpiSendData &rArr; SPI2_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dns_Task
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSn_SR
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_return
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZC_Rand
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> zc_adapter.o(i.ZC_Init)
</UL>
<P><STRONG><a name="[4d]"></a>HF_FirmwareUpdate</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, zc_adapter.o(i.HF_FirmwareUpdate))
<BR>[Address Reference Count : 1]<UL><LI> zc_adapter.o(i.ZC_Init)
</UL>
<P><STRONG><a name="[51]"></a>HF_FirmwareUpdateFinish</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, zc_adapter.o(i.HF_FirmwareUpdateFinish))
<BR>[Address Reference Count : 1]<UL><LI> zc_adapter.o(i.ZC_Init)
</UL>
<P><STRONG><a name="[54]"></a>HF_GetMac</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, zc_adapter.o(i.HF_GetMac))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HF_GetMac &rArr; ZC_HexToString
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZC_HexToString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> zc_adapter.o(i.ZC_Init)
</UL>
<P><STRONG><a name="[4a]"></a>HF_ListenClient</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, zc_adapter.o(i.HF_ListenClient))
<BR>[Address Reference Count : 1]<UL><LI> zc_adapter.o(i.ZC_Init)
</UL>
<P><STRONG><a name="[a3]"></a>HF_ReadDataFormFlash</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, zc_adapter.o(i.HF_ReadDataFormFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HF_ReadDataFormFlash
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[55]"></a>HF_Reboot</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, zc_adapter.o(i.HF_Reboot))
<BR>[Address Reference Count : 1]<UL><LI> zc_adapter.o(i.ZC_Init)
</UL>
<P><STRONG><a name="[53]"></a>HF_Rest</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, zc_adapter.o(i.HF_Rest))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HF_Rest &rArr; HF_WriteDataToFlash &rArr; FLASH_ProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_WriteDataToFlash
</UL>
<BR>[Address Reference Count : 1]<UL><LI> zc_adapter.o(i.ZC_Init)
</UL>
<P><STRONG><a name="[4e]"></a>HF_SendDataToMoudle</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, zc_adapter.o(i.HF_SendDataToMoudle))
<BR><BR>[Stack]<UL><LI>Max Depth = 1104<LI>Call Chain = HF_SendDataToMoudle &rArr; AC_RecvMessage &rArr; AC_DealNotifyMessage &rArr; AC_ConfigWifi &rArr; AC_SendMessage &rArr; ZC_RecvDataFromMoudle &rArr; PCT_HandleMoudleEvent &rArr; PCT_SendEmptyMsg &rArr; PCT_SendMsgToCloud &rArr; SEC_Encrypt &rArr; SEC_EncryptTextByRsa &rArr; rsa_pkcs1_encrypt &rArr; rsa_public &rArr; mpi_exp_mod &rArr; mpi_mod_mpi &rArr; mpi_div_mpi &rArr; mpi_mul_int &rArr; mpi_mul_mpi &rArr; mpi_copy &rArr; mpi_grow
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_RecvMessage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> zc_adapter.o(i.ZC_Init)
</UL>
<P><STRONG><a name="[4b]"></a>HF_SendTcpData</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, zc_adapter.o(i.HF_SendTcpData))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = HF_SendTcpData &rArr; send &rArr; send_data_processing &rArr; wiz_write_buf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> zc_adapter.o(i.ZC_Init)
</UL>
<P><STRONG><a name="[4c]"></a>HF_SendUdpData</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, zc_adapter.o(i.HF_SendUdpData))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = HF_SendUdpData &rArr; sendto &rArr; send_data_processing &rArr; wiz_write_buf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSn_SR
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto
</UL>
<BR>[Address Reference Count : 1]<UL><LI> zc_adapter.o(i.ZC_Init)
</UL>
<P><STRONG><a name="[4f]"></a>HF_SetTimer</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, zc_adapter.o(i.HF_SetTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HF_SetTimer &rArr; timer_set
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_FindIdleTimer
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_AllocateTimer
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> zc_adapter.o(i.ZC_Init)
</UL>
<P><STRONG><a name="[50]"></a>HF_StopTimer</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, zc_adapter.o(i.HF_StopTimer))
<BR>[Address Reference Count : 1]<UL><LI> zc_adapter.o(i.ZC_Init)
</UL>
<P><STRONG><a name="[a9]"></a>HF_WakeUp</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, zc_adapter.o(i.HF_WakeUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HF_WakeUp &rArr; PCT_WakeUp &rArr; PCT_SendNotifyMsg &rArr; EVENT_BuildMsg &rArr; crc16_ccitt &rArr; crc_cal_by_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_WakeUp
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[52]"></a>HF_WriteDataToFlash</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, zc_adapter.o(i.HF_WriteDataToFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HF_WriteDataToFlash &rArr; FLASH_ProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Rest
</UL>
<BR>[Address Reference Count : 1]<UL><LI> zc_adapter.o(i.ZC_Init)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[ab]"></a>IINCHIP_CSoff</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, w5500.o(i.IINCHIP_CSoff))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IINCHIP_CSoff &rArr; WIZ_CS
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZ_CS
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_write_buf
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_read_buf
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_WRITE
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_READ
</UL>

<P><STRONG><a name="[ad]"></a>IINCHIP_CSon</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, w5500.o(i.IINCHIP_CSon))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IINCHIP_CSon &rArr; WIZ_CS
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZ_CS
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_write_buf
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_read_buf
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_WRITE
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_READ
</UL>

<P><STRONG><a name="[ae]"></a>IINCHIP_READ</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, w5500.o(i.IINCHIP_READ))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IINCHIP_READ &rArr; IINCHIP_SpiSendData &rArr; SPI2_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_SpiSendData
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_CSon
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_CSoff
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSn_SR
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSn_RX_RSR
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data_processing
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_data_processing
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSn_TX_FSR
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSn_IR
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disconnect
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
</UL>

<P><STRONG><a name="[af]"></a>IINCHIP_SpiSendData</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, w5500.o(i.IINCHIP_SpiSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IINCHIP_SpiSendData &rArr; SPI2_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_write_buf
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_read_buf
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_WRITE
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_READ
</UL>

<P><STRONG><a name="[b1]"></a>IINCHIP_WRITE</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, w5500.o(i.IINCHIP_WRITE))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IINCHIP_WRITE &rArr; IINCHIP_SpiSendData &rArr; SPI2_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_SpiSendData
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_CSon
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_CSoff
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data_processing
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_data_processing
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disconnect
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysinit
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setRTR
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setRCR
</UL>

<P><STRONG><a name="[b2]"></a>LED_GPIO_Configuration</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, led.o(i.LED_GPIO_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LED_GPIO_Configuration &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b4]"></a>MSG_Init</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, zc_message_queue.o(i.MSG_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MSG_Init &rArr; MSG_InitQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSG_InitQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_ReconnectCloud
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_Init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_DisConnectCloud
</UL>

<P><STRONG><a name="[b5]"></a>MSG_InitQueue</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, zc_message_queue.o(i.MSG_InitQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MSG_InitQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSG_Init
</UL>

<P><STRONG><a name="[bb]"></a>MSG_PopMsg</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, zc_message_queue.o(i.MSG_PopMsg))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_RecvAccessMsg4
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_RecvAccessMsg2
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_HandleUnbindMsg
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_HandleEvent
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSG_SendDataToCloud
</UL>

<P><STRONG><a name="[b9]"></a>MSG_PushMsg</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, zc_message_queue.o(i.MSG_PushMsg))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_SendMsgToCloud
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSG_RecvDataFromCloud
</UL>

<P><STRONG><a name="[b6]"></a>MSG_RecvData</STRONG> (Thumb, 378 bytes, Stack size 24 bytes, zc_message_queue.o(i.MSG_RecvData))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MSG_RecvData
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSG_RecvDataFromCloud
</UL>

<P><STRONG><a name="[b7]"></a>MSG_RecvDataFromCloud</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, zc_message_queue.o(i.MSG_RecvDataFromCloud))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = MSG_RecvDataFromCloud &rArr; SEC_Decrypt &rArr; SEC_DecryptTextByRsa &rArr; rsa_pkcs1_decrypt &rArr; rsa_public &rArr; mpi_exp_mod &rArr; mpi_mod_mpi &rArr; mpi_div_mpi &rArr; mpi_mul_int &rArr; mpi_mul_mpi &rArr; mpi_copy &rArr; mpi_grow
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSG_RecvData
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEC_Decrypt
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSG_PushMsg
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loopback_tcpc
</UL>

<P><STRONG><a name="[ba]"></a>MSG_SendDataToCloud</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, zc_message_queue.o(i.MSG_SendDataToCloud))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MSG_SendDataToCloud
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSG_PopMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loopback_tcpc
</UL>

<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[bc]"></a>NVIC_Configuration</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, main.o(i.NVIC_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetVectorTable
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[be]"></a>NVIC_Init</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>

<P><STRONG><a name="[bd]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(i.NVIC_PriorityGroupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>

<P><STRONG><a name="[bf]"></a>NVIC_SetVectorTable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, misc.o(i.NVIC_SetVectorTable))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>

<P><STRONG><a name="[c0]"></a>PCT_CheckCrc</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, zc_protocol_controller.o(i.PCT_CheckCrc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = PCT_CheckCrc &rArr; crc16_ccitt &rArr; crc_cal_by_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16_ccitt
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_RecvAccessMsg4
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_RecvAccessMsg2
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_HandleEvent
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZC_RecvDataFromMoudle
</UL>

<P><STRONG><a name="[e3]"></a>PCT_ConnectCloud</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, zc_protocol_controller.o(i.PCT_ConnectCloud))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PCT_ConnectCloud
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_Run
</UL>

<P><STRONG><a name="[c1]"></a>PCT_DisConnectCloud</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, zc_protocol_controller.o(i.PCT_DisConnectCloud))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = PCT_DisConnectCloud &rArr; PCT_SendNotifyMsg &rArr; EVENT_BuildMsg &rArr; crc16_ccitt &rArr; crc_cal_by_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_SendNotifyMsg
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSG_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_TimeoutAction
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_SendCloudAccessMsg1
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_ResetNetWork
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_RecvAccessMsg4
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_RecvAccessMsg2
</UL>

<P><STRONG><a name="[c3]"></a>PCT_HandleEvent</STRONG> (Thumb, 308 bytes, Stack size 24 bytes, zc_protocol_controller.o(i.PCT_HandleEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = PCT_HandleEvent &rArr; PCT_HandleOtaFileChunkMsg &rArr; PCT_SendErrorMsg &rArr; PCT_SendMsgToCloud &rArr; SEC_Encrypt &rArr; SEC_EncryptTextByRsa &rArr; rsa_pkcs1_encrypt &rArr; rsa_public &rArr; mpi_exp_mod &rArr; mpi_mod_mpi &rArr; mpi_div_mpi &rArr; mpi_mul_int &rArr; mpi_mul_mpi &rArr; mpi_copy &rArr; mpi_grow
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZC_TraceData
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_CheckCrc
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_SetTokenKey
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_SendUnbindMsg
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_SendErrorMsg
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_SendEmptyMsg
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_ResetNetWork
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_HandleOtaFileEndMsg
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_HandleOtaFileChunkMsg
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_HandleOtaFileBeginMsg
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_HandleOtaEndMsg
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_HandleOtaBeginMsg
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_HandleMoudleMsg
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_StopTimer
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSG_PopMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_Run
</UL>

<P><STRONG><a name="[d1]"></a>PCT_HandleMoudleEvent</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, zc_protocol_controller.o(i.PCT_HandleMoudleEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = PCT_HandleMoudleEvent &rArr; PCT_SendEmptyMsg &rArr; PCT_SendMsgToCloud &rArr; SEC_Encrypt &rArr; SEC_EncryptTextByRsa &rArr; rsa_pkcs1_encrypt &rArr; rsa_public &rArr; mpi_exp_mod &rArr; mpi_mod_mpi &rArr; mpi_div_mpi &rArr; mpi_mul_int &rArr; mpi_mul_mpi &rArr; mpi_copy &rArr; mpi_grow
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_SendMsgToCloud
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_SendEmptyMsg
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_StopTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZC_RecvDataFromMoudle
</UL>

<P><STRONG><a name="[ce]"></a>PCT_HandleMoudleMsg</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, zc_protocol_controller.o(i.PCT_HandleMoudleMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PCT_HandleMoudleMsg &rArr; TIMER_StopTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_StopTimer
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_HandleEvent
</UL>

<P><STRONG><a name="[c9]"></a>PCT_HandleOtaBeginMsg</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, zc_protocol_controller.o(i.PCT_HandleOtaBeginMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = PCT_HandleOtaBeginMsg &rArr; PCT_SendAckToCloud &rArr; PCT_SendMsgToCloud &rArr; SEC_Encrypt &rArr; SEC_EncryptTextByRsa &rArr; rsa_pkcs1_encrypt &rArr; rsa_public &rArr; mpi_exp_mod &rArr; mpi_mod_mpi &rArr; mpi_div_mpi &rArr; mpi_mul_int &rArr; mpi_mul_mpi &rArr; mpi_copy &rArr; mpi_grow
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_SendAckToCloud
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_SendNotifyMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_HandleEvent
</UL>

<P><STRONG><a name="[cd]"></a>PCT_HandleOtaEndMsg</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, zc_protocol_controller.o(i.PCT_HandleOtaEndMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = PCT_HandleOtaEndMsg &rArr; PCT_SendErrorMsg &rArr; PCT_SendMsgToCloud &rArr; SEC_Encrypt &rArr; SEC_EncryptTextByRsa &rArr; rsa_pkcs1_encrypt &rArr; rsa_public &rArr; mpi_exp_mod &rArr; mpi_mod_mpi &rArr; mpi_div_mpi &rArr; mpi_mul_int &rArr; mpi_mul_mpi &rArr; mpi_copy &rArr; mpi_grow
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_SendErrorMsg
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_SendAckToCloud
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_SendNotifyMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_HandleEvent
</UL>

<P><STRONG><a name="[ca]"></a>PCT_HandleOtaFileBeginMsg</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, zc_protocol_controller.o(i.PCT_HandleOtaFileBeginMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = PCT_HandleOtaFileBeginMsg &rArr; PCT_SendAckToCloud &rArr; PCT_SendMsgToCloud &rArr; SEC_Encrypt &rArr; SEC_EncryptTextByRsa &rArr; rsa_pkcs1_encrypt &rArr; rsa_public &rArr; mpi_exp_mod &rArr; mpi_mod_mpi &rArr; mpi_div_mpi &rArr; mpi_mul_int &rArr; mpi_mul_mpi &rArr; mpi_copy &rArr; mpi_grow
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_SendAckToCloud
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_HandleEvent
</UL>

<P><STRONG><a name="[cb]"></a>PCT_HandleOtaFileChunkMsg</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, zc_protocol_controller.o(i.PCT_HandleOtaFileChunkMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = PCT_HandleOtaFileChunkMsg &rArr; PCT_SendErrorMsg &rArr; PCT_SendMsgToCloud &rArr; SEC_Encrypt &rArr; SEC_EncryptTextByRsa &rArr; rsa_pkcs1_encrypt &rArr; rsa_public &rArr; mpi_exp_mod &rArr; mpi_mod_mpi &rArr; mpi_div_mpi &rArr; mpi_mul_int &rArr; mpi_mul_mpi &rArr; mpi_copy &rArr; mpi_grow
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_SendErrorMsg
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_SendAckToCloud
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_HandleEvent
</UL>

<P><STRONG><a name="[cc]"></a>PCT_HandleOtaFileEndMsg</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, zc_protocol_controller.o(i.PCT_HandleOtaFileEndMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = PCT_HandleOtaFileEndMsg &rArr; PCT_SendAckToCloud &rArr; PCT_SendMsgToCloud &rArr; SEC_Encrypt &rArr; SEC_EncryptTextByRsa &rArr; rsa_pkcs1_encrypt &rArr; rsa_public &rArr; mpi_exp_mod &rArr; mpi_mod_mpi &rArr; mpi_div_mpi &rArr; mpi_mul_int &rArr; mpi_mul_mpi &rArr; mpi_copy &rArr; mpi_grow
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_SendAckToCloud
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_HandleEvent
</UL>

<P><STRONG><a name="[d4]"></a>PCT_HandleUnbindMsg</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, zc_protocol_controller.o(i.PCT_HandleUnbindMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PCT_HandleUnbindMsg &rArr; TIMER_StopTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_StopTimer
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSG_PopMsg
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZC_ConfigUnBind
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_Run
</UL>

<P><STRONG><a name="[d6]"></a>PCT_Init</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, zc_protocol_controller.o(i.PCT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PCT_Init &rArr; MSG_Init &rArr; MSG_InitQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZC_ClientInit
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Init
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSG_Init
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZC_ConfigInitPara
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZC_Init
</UL>

<P><STRONG><a name="[da]"></a>PCT_ModuleOtaFileBeginMsg</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, zc_protocol_controller.o(i.PCT_ModuleOtaFileBeginMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = PCT_ModuleOtaFileBeginMsg &rArr; PCT_SendNotifyMsg &rArr; EVENT_BuildMsg &rArr; crc16_ccitt &rArr; crc_cal_by_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_SendNotifyMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZC_RecvDataFromMoudle
</UL>

<P><STRONG><a name="[db]"></a>PCT_ModuleOtaFileChunkMsg</STRONG> (Thumb, 250 bytes, Stack size 48 bytes, zc_protocol_controller.o(i.PCT_ModuleOtaFileChunkMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = PCT_ModuleOtaFileChunkMsg &rArr; PCT_SendNotifyMsg &rArr; EVENT_BuildMsg &rArr; crc16_ccitt &rArr; crc_cal_by_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16_ccitt
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_SendNotifyMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZC_RecvDataFromMoudle
</UL>

<P><STRONG><a name="[dc]"></a>PCT_ModuleOtaFileEndMsg</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, zc_protocol_controller.o(i.PCT_ModuleOtaFileEndMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = PCT_ModuleOtaFileEndMsg &rArr; PCT_SendNotifyMsg &rArr; EVENT_BuildMsg &rArr; crc16_ccitt &rArr; crc_cal_by_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_SendNotifyMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZC_RecvDataFromMoudle
</UL>

<P><STRONG><a name="[dd]"></a>PCT_ReconnectCloud</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, zc_protocol_controller.o(i.PCT_ReconnectCloud))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PCT_ReconnectCloud &rArr; MSG_Init &rArr; MSG_InitQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Init
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_StopTimer
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSG_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loopback_tcpc
</UL>

<P><STRONG><a name="[de]"></a>PCT_RecvAccessMsg2</STRONG> (Thumb, 280 bytes, Stack size 32 bytes, zc_protocol_controller.o(i.PCT_RecvAccessMsg2))
<BR><BR>[Stack]<UL><LI>Max Depth = 800<LI>Call Chain = PCT_RecvAccessMsg2 &rArr; PCT_SendCloudAccessMsg3 &rArr; PCT_SendMsgToCloud &rArr; SEC_Encrypt &rArr; SEC_EncryptTextByRsa &rArr; rsa_pkcs1_encrypt &rArr; rsa_public &rArr; mpi_exp_mod &rArr; mpi_mod_mpi &rArr; mpi_div_mpi &rArr; mpi_mul_int &rArr; mpi_mul_mpi &rArr; mpi_copy &rArr; mpi_grow
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_CheckCrc
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_SendCloudAccessMsg3
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_DisConnectCloud
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_StopTimer
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSG_PopMsg
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZC_StoreAccessInfo
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_Run
</UL>

<P><STRONG><a name="[e2]"></a>PCT_RecvAccessMsg4</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, zc_protocol_controller.o(i.PCT_RecvAccessMsg4))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = PCT_RecvAccessMsg4 &rArr; PCT_DisConnectCloud &rArr; PCT_SendNotifyMsg &rArr; EVENT_BuildMsg &rArr; crc16_ccitt &rArr; crc_cal_by_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_CheckCrc
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_DisConnectCloud
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_StopTimer
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_SendNotifyMsg
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSG_PopMsg
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_Run
</UL>

<P><STRONG><a name="[d0]"></a>PCT_ResetNetWork</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, zc_protocol_controller.o(i.PCT_ResetNetWork))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = PCT_ResetNetWork &rArr; PCT_SendEmptyMsg &rArr; PCT_SendMsgToCloud &rArr; SEC_Encrypt &rArr; SEC_EncryptTextByRsa &rArr; rsa_pkcs1_encrypt &rArr; rsa_public &rArr; mpi_exp_mod &rArr; mpi_mod_mpi &rArr; mpi_div_mpi &rArr; mpi_mul_int &rArr; mpi_mul_mpi &rArr; mpi_copy &rArr; mpi_grow
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_SendEmptyMsg
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_SendAckToCloud
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_DisConnectCloud
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZC_ConfigInitPara
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_HandleEvent
</UL>

<P><STRONG><a name="[9a]"></a>PCT_Run</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, zc_protocol_controller.o(i.PCT_Run))
<BR><BR>[Stack]<UL><LI>Max Depth = 808<LI>Call Chain = PCT_Run &rArr; PCT_RecvAccessMsg2 &rArr; PCT_SendCloudAccessMsg3 &rArr; PCT_SendMsgToCloud &rArr; SEC_Encrypt &rArr; SEC_EncryptTextByRsa &rArr; rsa_pkcs1_encrypt &rArr; rsa_public &rArr; mpi_exp_mod &rArr; mpi_mod_mpi &rArr; mpi_div_mpi &rArr; mpi_mul_int &rArr; mpi_mul_mpi &rArr; mpi_copy &rArr; mpi_grow
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_SendCloudAccessMsg1
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_RecvAccessMsg4
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_RecvAccessMsg2
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_HandleUnbindMsg
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_HandleEvent
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_ConnectCloud
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Cloudfunc
</UL>

<P><STRONG><a name="[d3]"></a>PCT_SendAckToCloud</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, zc_protocol_controller.o(i.PCT_SendAckToCloud))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = PCT_SendAckToCloud &rArr; PCT_SendMsgToCloud &rArr; SEC_Encrypt &rArr; SEC_EncryptTextByRsa &rArr; rsa_pkcs1_encrypt &rArr; rsa_public &rArr; mpi_exp_mod &rArr; mpi_mod_mpi &rArr; mpi_div_mpi &rArr; mpi_mul_int &rArr; mpi_mul_mpi &rArr; mpi_copy &rArr; mpi_grow
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVENT_BuildMsg
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_SendMsgToCloud
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_SetTokenKey
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_ResetNetWork
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_HandleOtaFileEndMsg
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_HandleOtaFileChunkMsg
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_HandleOtaFileBeginMsg
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_HandleOtaEndMsg
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_HandleOtaBeginMsg
</UL>

<P><STRONG><a name="[e4]"></a>PCT_SendCloudAccessMsg1</STRONG> (Thumb, 188 bytes, Stack size 88 bytes, zc_protocol_controller.o(i.PCT_SendCloudAccessMsg1))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = PCT_SendCloudAccessMsg1 &rArr; PCT_SendMsgToCloud &rArr; SEC_Encrypt &rArr; SEC_EncryptTextByRsa &rArr; rsa_pkcs1_encrypt &rArr; rsa_public &rArr; mpi_exp_mod &rArr; mpi_mod_mpi &rArr; mpi_div_mpi &rArr; mpi_mul_int &rArr; mpi_mul_mpi &rArr; mpi_copy &rArr; mpi_grow
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZC_GetStoreInfor
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVENT_BuildMsg
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_SendMsgToCloud
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_DisConnectCloud
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_StopTimer
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_Run
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loopback_tcpc
</UL>

<P><STRONG><a name="[e0]"></a>PCT_SendCloudAccessMsg3</STRONG> (Thumb, 140 bytes, Stack size 72 bytes, zc_protocol_controller.o(i.PCT_SendCloudAccessMsg3))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = PCT_SendCloudAccessMsg3 &rArr; PCT_SendMsgToCloud &rArr; SEC_Encrypt &rArr; SEC_EncryptTextByRsa &rArr; rsa_pkcs1_encrypt &rArr; rsa_public &rArr; mpi_exp_mod &rArr; mpi_mod_mpi &rArr; mpi_div_mpi &rArr; mpi_mul_int &rArr; mpi_mul_mpi &rArr; mpi_copy &rArr; mpi_grow
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZC_GetStoreInfor
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVENT_BuildMsg
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_SendMsgToCloud
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_RecvAccessMsg2
</UL>

<P><STRONG><a name="[c7]"></a>PCT_SendEmptyMsg</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, zc_protocol_controller.o(i.PCT_SendEmptyMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = PCT_SendEmptyMsg &rArr; PCT_SendMsgToCloud &rArr; SEC_Encrypt &rArr; SEC_EncryptTextByRsa &rArr; rsa_pkcs1_encrypt &rArr; rsa_public &rArr; mpi_exp_mod &rArr; mpi_mod_mpi &rArr; mpi_div_mpi &rArr; mpi_mul_int &rArr; mpi_mul_mpi &rArr; mpi_copy &rArr; mpi_grow
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_SendMsgToCloud
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVENT_BuildEmptyMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_SetTokenKey
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_SendMoudleTimeout
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_ResetNetWork
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_HandleEvent
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_HandleMoudleEvent
</UL>

<P><STRONG><a name="[c8]"></a>PCT_SendErrorMsg</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, zc_protocol_controller.o(i.PCT_SendErrorMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = PCT_SendErrorMsg &rArr; PCT_SendMsgToCloud &rArr; SEC_Encrypt &rArr; SEC_EncryptTextByRsa &rArr; rsa_pkcs1_encrypt &rArr; rsa_public &rArr; mpi_exp_mod &rArr; mpi_mod_mpi &rArr; mpi_div_mpi &rArr; mpi_mul_int &rArr; mpi_mul_mpi &rArr; mpi_copy &rArr; mpi_grow
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVENT_BuildMsg
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_SendMsgToCloud
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_SendMoudleTimeout
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_HandleOtaFileChunkMsg
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_HandleOtaEndMsg
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_HandleEvent
</UL>

<P><STRONG><a name="[e5]"></a>PCT_SendHeartMsg</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, zc_protocol_controller.o(i.PCT_SendHeartMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = PCT_SendHeartMsg &rArr; PCT_SendMsgToCloud &rArr; SEC_Encrypt &rArr; SEC_EncryptTextByRsa &rArr; rsa_pkcs1_encrypt &rArr; rsa_public &rArr; mpi_exp_mod &rArr; mpi_mod_mpi &rArr; mpi_div_mpi &rArr; mpi_mul_int &rArr; mpi_mul_mpi &rArr; mpi_copy &rArr; mpi_grow
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_SendMsgToCloud
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVENT_BuildHeartMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_TimeoutAction
</UL>

<P><STRONG><a name="[e6]"></a>PCT_SendMoudleTimeout</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, zc_protocol_controller.o(i.PCT_SendMoudleTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = PCT_SendMoudleTimeout &rArr; PCT_SendErrorMsg &rArr; PCT_SendMsgToCloud &rArr; SEC_Encrypt &rArr; SEC_EncryptTextByRsa &rArr; rsa_pkcs1_encrypt &rArr; rsa_public &rArr; mpi_exp_mod &rArr; mpi_mod_mpi &rArr; mpi_div_mpi &rArr; mpi_mul_int &rArr; mpi_mul_mpi &rArr; mpi_copy &rArr; mpi_grow
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_SendErrorMsg
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_SendEmptyMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_TimeoutAction
</UL>

<P><STRONG><a name="[d2]"></a>PCT_SendMsgToCloud</STRONG> (Thumb, 260 bytes, Stack size 32 bytes, zc_protocol_controller.o(i.PCT_SendMsgToCloud))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = PCT_SendMsgToCloud &rArr; SEC_Encrypt &rArr; SEC_EncryptTextByRsa &rArr; rsa_pkcs1_encrypt &rArr; rsa_public &rArr; mpi_exp_mod &rArr; mpi_mod_mpi &rArr; mpi_div_mpi &rArr; mpi_mul_int &rArr; mpi_mul_mpi &rArr; mpi_copy &rArr; mpi_grow
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEC_PaddingCheck
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEC_Encrypt
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSG_PushMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_SendUnbindMsg
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_SendHeartMsg
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_SendErrorMsg
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_SendEmptyMsg
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_SendCloudAccessMsg3
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_SendCloudAccessMsg1
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_SendAckToCloud
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_HandleMoudleEvent
</UL>

<P><STRONG><a name="[c2]"></a>PCT_SendNotifyMsg</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, zc_protocol_controller.o(i.PCT_SendNotifyMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = PCT_SendNotifyMsg &rArr; EVENT_BuildMsg &rArr; crc16_ccitt &rArr; crc_cal_by_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVENT_BuildMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_TimeoutAction
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_WakeUp
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_RecvAccessMsg4
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_HandleOtaEndMsg
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_HandleOtaBeginMsg
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_DisConnectCloud
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_ModuleOtaFileEndMsg
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_ModuleOtaFileChunkMsg
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_ModuleOtaFileBeginMsg
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZC_RecvDataFromMoudle
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZC_DealExtCode
</UL>

<P><STRONG><a name="[c5]"></a>PCT_SendUnbindMsg</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, zc_protocol_controller.o(i.PCT_SendUnbindMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = PCT_SendUnbindMsg &rArr; PCT_SendMsgToCloud &rArr; SEC_Encrypt &rArr; SEC_EncryptTextByRsa &rArr; rsa_pkcs1_encrypt &rArr; rsa_public &rArr; mpi_exp_mod &rArr; mpi_mod_mpi &rArr; mpi_div_mpi &rArr; mpi_mul_int &rArr; mpi_mul_mpi &rArr; mpi_copy &rArr; mpi_grow
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVENT_BuildMsg
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_SendMsgToCloud
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_TimeoutAction
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_HandleEvent
</UL>

<P><STRONG><a name="[cf]"></a>PCT_SetTokenKey</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, zc_protocol_controller.o(i.PCT_SetTokenKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = PCT_SetTokenKey &rArr; PCT_SendEmptyMsg &rArr; PCT_SendMsgToCloud &rArr; SEC_Encrypt &rArr; SEC_EncryptTextByRsa &rArr; rsa_pkcs1_encrypt &rArr; rsa_public &rArr; mpi_exp_mod &rArr; mpi_mod_mpi &rArr; mpi_div_mpi &rArr; mpi_mul_int &rArr; mpi_mul_mpi &rArr; mpi_copy &rArr; mpi_grow
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_SendEmptyMsg
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_SendAckToCloud
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZC_StoreTokenKey
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_HandleEvent
</UL>

<P><STRONG><a name="[aa]"></a>PCT_WakeUp</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, zc_protocol_controller.o(i.PCT_WakeUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = PCT_WakeUp &rArr; PCT_SendNotifyMsg &rArr; EVENT_BuildMsg &rArr; crc16_ccitt &rArr; crc_cal_by_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZC_ClientWakeUp
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_SendNotifyMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_WakeUp
</UL>

<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[f9]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[b3]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_GPIO_Configuration
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[eb]"></a>RCC_Configuration</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, main.o(i.RCC_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RCC_Configuration &rArr; RCC_WaitForHSEStartUp &rArr; RCC_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitForHSEStartUp
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SYSCLKConfig
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLConfig
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLCmd
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PCLK2Config
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PCLK1Config
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HSEConfig
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HCLKConfig
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSYSCLKSource
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_DeInit
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SetLatency
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_PrefetchBufferCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ec]"></a>RCC_DeInit</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[128]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 192 bytes, Stack size 12 bytes, stm32f10x_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[f6]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32f10x_rcc.o(i.RCC_GetFlagStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitForHSEStartUp
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[f8]"></a>RCC_GetSYSCLKSource</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_GetSYSCLKSource))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[f1]"></a>RCC_HCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_HCLKConfig))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[ed]"></a>RCC_HSEConfig</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_HSEConfig))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[f3]"></a>RCC_PCLK1Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_PCLK1Config))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[f2]"></a>RCC_PCLK2Config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_PCLK2Config))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[f5]"></a>RCC_PLLCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_PLLCmd))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[f4]"></a>RCC_PLLConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_PLLConfig))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[f7]"></a>RCC_SYSCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_SYSCLKConfig))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[ee]"></a>RCC_WaitForHSEStartUp</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32f10x_rcc.o(i.RCC_WaitForHSEStartUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCC_WaitForHSEStartUp &rArr; RCC_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[fa]"></a>Reset_W5500</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, util.o(i.Reset_W5500))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Reset_W5500 &rArr; Delay_ms &rArr; delay_ms &rArr; SysTick_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fc]"></a>SEC_AesDecrypt</STRONG> (Thumb, 72 bytes, Stack size 56 bytes, zc_sec_engine.o(i.SEC_AesDecrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 476<LI>Call Chain = SEC_AesDecrypt &rArr; AES_CBC_Decrypt &rArr; AES_cbc_core &rArr; AES_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CBC_Decrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEC_Decrypt
</UL>

<P><STRONG><a name="[fd]"></a>SEC_AesEncrypt</STRONG> (Thumb, 70 bytes, Stack size 48 bytes, zc_sec_engine.o(i.SEC_AesEncrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = SEC_AesEncrypt &rArr; AES_CBC_Encrypt &rArr; AES_cbc_core &rArr; AES_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CBC_Encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEC_Encrypt
</UL>

<P><STRONG><a name="[b8]"></a>SEC_Decrypt</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, zc_sec_engine.o(i.SEC_Decrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = SEC_Decrypt &rArr; SEC_DecryptTextByRsa &rArr; rsa_pkcs1_decrypt &rArr; rsa_public &rArr; mpi_exp_mod &rArr; mpi_mod_mpi &rArr; mpi_div_mpi &rArr; mpi_mul_int &rArr; mpi_mul_mpi &rArr; mpi_copy &rArr; mpi_grow
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEC_DecryptTextByRsa
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEC_AesDecrypt
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSG_RecvDataFromCloud
</UL>

<P><STRONG><a name="[fe]"></a>SEC_DecryptTextByRsa</STRONG> (Thumb, 218 bytes, Stack size 48 bytes, zc_sec_engine.o(i.SEC_DecryptTextByRsa))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = SEC_DecryptTextByRsa &rArr; rsa_pkcs1_decrypt &rArr; rsa_public &rArr; mpi_exp_mod &rArr; mpi_mod_mpi &rArr; mpi_div_mpi &rArr; mpi_mul_int &rArr; mpi_mul_mpi &rArr; mpi_copy &rArr; mpi_grow
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZC_GetStoreInfor
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_pkcs1_decrypt
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_free
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEC_InitRsaContextWithPrivateKey
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEC_Decrypt
</UL>

<P><STRONG><a name="[e8]"></a>SEC_Encrypt</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, zc_sec_engine.o(i.SEC_Encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = SEC_Encrypt &rArr; SEC_EncryptTextByRsa &rArr; rsa_pkcs1_encrypt &rArr; rsa_public &rArr; mpi_exp_mod &rArr; mpi_mod_mpi &rArr; mpi_div_mpi &rArr; mpi_mul_int &rArr; mpi_mul_mpi &rArr; mpi_copy &rArr; mpi_grow
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEC_EncryptTextByRsa
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEC_AesEncrypt
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_SendMsgToCloud
</UL>

<P><STRONG><a name="[102]"></a>SEC_EncryptTextByRsa</STRONG> (Thumb, 212 bytes, Stack size 40 bytes, zc_sec_engine.o(i.SEC_EncryptTextByRsa))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = SEC_EncryptTextByRsa &rArr; rsa_pkcs1_encrypt &rArr; rsa_public &rArr; mpi_exp_mod &rArr; mpi_mod_mpi &rArr; mpi_div_mpi &rArr; mpi_mul_int &rArr; mpi_mul_mpi &rArr; mpi_copy &rArr; mpi_grow
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZC_GetStoreInfor
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_pkcs1_encrypt
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_free
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEC_InitRsaContextWithPublicKey
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEC_Encrypt
</UL>

<P><STRONG><a name="[ff]"></a>SEC_InitRsaContextWithPrivateKey</STRONG> (Thumb, 138 bytes, Stack size 56 bytes, zc_sec_engine.o(i.SEC_InitRsaContextWithPrivateKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SEC_InitRsaContextWithPrivateKey &rArr; mpi_read_binary &rArr; mpi_lset &rArr; mpi_grow
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_init
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_read_binary
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEC_DecryptTextByRsa
</UL>

<P><STRONG><a name="[103]"></a>SEC_InitRsaContextWithPublicKey</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, zc_sec_engine.o(i.SEC_InitRsaContextWithPublicKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SEC_InitRsaContextWithPublicKey &rArr; mpi_read_binary &rArr; mpi_lset &rArr; mpi_grow
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_init
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_read_binary
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEC_EncryptTextByRsa
</UL>

<P><STRONG><a name="[e7]"></a>SEC_PaddingCheck</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, zc_sec_engine.o(i.SEC_PaddingCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SEC_PaddingCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_SendMsgToCloud
</UL>

<P><STRONG><a name="[b0]"></a>SPI2_SendByte</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, spi2.o(i.SPI2_SendByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI2_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_SpiSendData
</UL>

<P><STRONG><a name="[12c]"></a>SPI_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZ_SPI_Init
</UL>

<P><STRONG><a name="[107]"></a>SPI_I2S_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_I2S_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_SendByte
</UL>

<P><STRONG><a name="[109]"></a>SPI_I2S_ReceiveData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_I2S_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_SendByte
</UL>

<P><STRONG><a name="[108]"></a>SPI_I2S_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_I2S_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_SendByte
</UL>

<P><STRONG><a name="[12b]"></a>SPI_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f10x_spi.o(i.SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZ_SPI_Init
</UL>

<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[10c]"></a>Set_network</STRONG> (Thumb, 378 bytes, Stack size 32 bytes, util.o(i.Set_network))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Set_network &rArr; sysinit &rArr; IINCHIP_WRITE &rArr; IINCHIP_SpiSendData &rArr; SPI2_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysinit
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSUBR
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSIPR
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSHAR
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setRTR
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setRCR
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setGAR
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSUBR
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSIPR
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSHAR
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getGAR
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZ_Config
</UL>

<P><STRONG><a name="[140]"></a>SysTick_CLKSourceConfig</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, misc.o(i.SysTick_CLKSourceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
</UL>

<P><STRONG><a name="[143]"></a>SysTick_CounterCmd</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32f10x_systick.o(i.SysTick_CounterCmd))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>

<P><STRONG><a name="[144]"></a>SysTick_GetFlagStatus</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, stm32f10x_systick.o(i.SysTick_GetFlagStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>

<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[141]"></a>SysTick_ITConfig</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32f10x_systick.o(i.SysTick_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
</UL>

<P><STRONG><a name="[142]"></a>SysTick_SetReload</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_systick.o(i.SysTick_SetReload))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>

<P><STRONG><a name="[47]"></a>SystemInit</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SystemInit &rArr; SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(.text)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32f10x_it.o(i.TIM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM2_IRQHandler &rArr; TIM_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.TIM3_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[a7]"></a>TIMER_AllocateTimer</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, zc_timer.o(i.TIMER_AllocateTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIMER_AllocateTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_SetTimer
</UL>

<P><STRONG><a name="[a6]"></a>TIMER_FindIdleTimer</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, zc_timer.o(i.TIMER_FindIdleTimer))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_SetTimer
</UL>

<P><STRONG><a name="[133]"></a>TIMER_GetTimerStatus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, zc_timer.o(i.TIMER_GetTimerStatus))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZC_TimerExpired
</UL>

<P><STRONG><a name="[d8]"></a>TIMER_Init</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, zc_timer.o(i.TIMER_Init))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_ReconnectCloud
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_Init
</UL>

<P><STRONG><a name="[c4]"></a>TIMER_StopTimer</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, zc_timer.o(i.TIMER_StopTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIMER_StopTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_SendCloudAccessMsg1
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_RecvAccessMsg4
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_RecvAccessMsg2
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_ReconnectCloud
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_HandleUnbindMsg
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_HandleMoudleMsg
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_HandleEvent
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_HandleMoudleEvent
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZC_RecvDataFromMoudle
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZC_DealExtCode
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZC_TimerExpired
</UL>

<P><STRONG><a name="[11b]"></a>TIMER_TimeoutAction</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, zc_timer.o(i.TIMER_TimeoutAction))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = TIMER_TimeoutAction &rArr; PCT_SendMoudleTimeout &rArr; PCT_SendErrorMsg &rArr; PCT_SendMsgToCloud &rArr; SEC_Encrypt &rArr; SEC_EncryptTextByRsa &rArr; rsa_pkcs1_encrypt &rArr; rsa_public &rArr; mpi_exp_mod &rArr; mpi_mod_mpi &rArr; mpi_div_mpi &rArr; mpi_mul_int &rArr; mpi_mul_mpi &rArr; mpi_copy &rArr; mpi_grow
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_SendUnbindMsg
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_SendMoudleTimeout
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_SendHeartMsg
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_DisConnectCloud
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_SendNotifyMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZC_TimerExpired
</UL>

<P><STRONG><a name="[119]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[11f]"></a>TIM_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Configuration
</UL>

<P><STRONG><a name="[118]"></a>TIM_GetITStatus</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, stm32f10x_tim.o(i.TIM_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[120]"></a>TIM_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Configuration
</UL>

<P><STRONG><a name="[11e]"></a>TIM_PrescalerConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_PrescalerConfig))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Configuration
</UL>

<P><STRONG><a name="[11d]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_TimeBaseInit))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Configuration
</UL>

<P><STRONG><a name="[11a]"></a>Timer2_ISR</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, main.o(i.Timer2_ISR))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[11c]"></a>Timer_Configuration</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, main.o(i.Timer_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Timer_Configuration
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PrescalerConfig
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.USART1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.USART2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, util.o(i.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USART3_IRQHandler &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[124]"></a>USART3_Init</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, util.o(i.USART3_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = USART3_Init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[126]"></a>USART_ClearFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Init
</UL>

<P><STRONG><a name="[127]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Init
</UL>

<P><STRONG><a name="[147]"></a>USART_GetFlagStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[121]"></a>USART_GetITStatus</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32f10x_usart.o(i.USART_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
</UL>

<P><STRONG><a name="[122]"></a>USART_ITConfig</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, stm32f10x_usart.o(i.USART_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Init
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
</UL>

<P><STRONG><a name="[125]"></a>USART_Init</STRONG> (Thumb, 210 bytes, Stack size 56 bytes, stm32f10x_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Init
</UL>

<P><STRONG><a name="[123]"></a>USART_ReceiveData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
</UL>

<P><STRONG><a name="[146]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[ac]"></a>WIZ_CS</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, spi2.o(i.WIZ_CS))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WIZ_CS
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_CSon
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_CSoff
</UL>

<P><STRONG><a name="[129]"></a>WIZ_Config</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, main.o(i.WIZ_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = WIZ_Config &rArr; Set_network &rArr; sysinit &rArr; IINCHIP_WRITE &rArr; IINCHIP_SpiSendData &rArr; SPI2_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_network
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12a]"></a>WIZ_SPI_Init</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, spi2.o(i.WIZ_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = WIZ_SPI_Init &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d9]"></a>ZC_ClientInit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, zc_client_manager.o(i.ZC_ClientInit))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_Init
</UL>

<P><STRONG><a name="[ea]"></a>ZC_ClientWakeUp</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, zc_client_manager.o(i.ZC_ClientWakeUp))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_WakeUp
</UL>

<P><STRONG><a name="[d7]"></a>ZC_ConfigInitPara</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, zc_configuration.o(i.ZC_ConfigInitPara))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ZC_ConfigInitPara
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_ResetNetWork
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_Init
</UL>

<P><STRONG><a name="[12d]"></a>ZC_ConfigPara</STRONG> (Thumb, 268 bytes, Stack size 16 bytes, zc_configuration.o(i.ZC_ConfigPara))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ZC_ConfigPara
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZC_RecvDataFromMoudle
</UL>

<P><STRONG><a name="[d5]"></a>ZC_ConfigUnBind</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, zc_configuration.o(i.ZC_ConfigUnBind))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ZC_ConfigUnBind
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_HandleUnbindMsg
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZC_RecvDataFromMoudle
</UL>

<P><STRONG><a name="[12e]"></a>ZC_DealExtCode</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, zc_moudle_manager.o(i.ZC_DealExtCode))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ZC_DealExtCode &rArr; PCT_SendNotifyMsg &rArr; EVENT_BuildMsg &rArr; crc16_ccitt &rArr; crc_cal_by_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_StopTimer
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_SendNotifyMsg
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZC_StoreRegisterInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZC_RecvDataFromMoudle
</UL>

<P><STRONG><a name="[130]"></a>ZC_DealSessionOpt</STRONG> (Thumb, 340 bytes, Stack size 104 bytes, zc_moudle_manager.o(i.ZC_DealSessionOpt))
<BR><BR>[Stack]<UL><LI>Max Depth = 524<LI>Call Chain = ZC_DealSessionOpt &rArr; AES_CBC_Encrypt &rArr; AES_cbc_core &rArr; AES_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16_ccitt
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CBC_Encrypt
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZC_GetStoreInfor
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVENT_BuildOption
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZC_RecvDataFromMoudle
</UL>

<P><STRONG><a name="[88]"></a>ZC_GetStoreInfor</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, zc_configuration.o(i.ZC_GetStoreInfor))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVENT_BuildBcMsg
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEC_EncryptTextByRsa
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEC_DecryptTextByRsa
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_SendCloudAccessMsg3
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_SendCloudAccessMsg1
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZC_DealSessionOpt
</UL>

<P><STRONG><a name="[a2]"></a>ZC_HexToString</STRONG> (Thumb, 84 bytes, Stack size 20 bytes, zc_common.o(i.ZC_HexToString))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ZC_HexToString
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_GetMac
</UL>

<P><STRONG><a name="[131]"></a>ZC_Init</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, zc_adapter.o(i.ZC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ZC_Init &rArr; PCT_Init &rArr; MSG_Init &rArr; MSG_InitQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a1]"></a>ZC_Rand</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, zc_common.o(i.ZC_Rand))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ZC_Rand
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loopback_tcpc
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_ConnectToCloud
</UL>

<P><STRONG><a name="[7b]"></a>ZC_RecvDataFromMoudle</STRONG> (Thumb, 386 bytes, Stack size 32 bytes, zc_moudle_manager.o(i.ZC_RecvDataFromMoudle))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = ZC_RecvDataFromMoudle &rArr; PCT_HandleMoudleEvent &rArr; PCT_SendEmptyMsg &rArr; PCT_SendMsgToCloud &rArr; SEC_Encrypt &rArr; SEC_EncryptTextByRsa &rArr; rsa_pkcs1_encrypt &rArr; rsa_public &rArr; mpi_exp_mod &rArr; mpi_mod_mpi &rArr; mpi_div_mpi &rArr; mpi_mul_int &rArr; mpi_mul_mpi &rArr; mpi_copy &rArr; mpi_grow
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZC_TraceData
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_CheckCrc
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_StopTimer
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_SendNotifyMsg
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_ModuleOtaFileEndMsg
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_ModuleOtaFileChunkMsg
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_ModuleOtaFileBeginMsg
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_HandleMoudleEvent
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZC_DealSessionOpt
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZC_DealExtCode
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZC_StoreRegisterInfo
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZC_ConfigUnBind
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZC_ConfigPara
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVENT_ParseOption
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_SendMessage
</UL>

<P><STRONG><a name="[9c]"></a>ZC_SendBc</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, zc_bc.o(i.ZC_SendBc))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = ZC_SendBc &rArr; EVENT_BuildBcMsg &rArr; crc16_ccitt &rArr; crc_cal_by_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVENT_BuildBcMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Cloudfunc
</UL>

<P><STRONG><a name="[e1]"></a>ZC_StoreAccessInfo</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, zc_configuration.o(i.ZC_StoreAccessInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ZC_StoreAccessInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_RecvAccessMsg2
</UL>

<P><STRONG><a name="[12f]"></a>ZC_StoreRegisterInfo</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, zc_configuration.o(i.ZC_StoreRegisterInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ZC_StoreRegisterInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZC_RecvDataFromMoudle
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZC_DealExtCode
</UL>

<P><STRONG><a name="[e9]"></a>ZC_StoreTokenKey</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, zc_configuration.o(i.ZC_StoreTokenKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ZC_StoreTokenKey
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_SetTokenKey
</UL>

<P><STRONG><a name="[99]"></a>ZC_TimerExpired</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, zc_adapter.o(i.ZC_TimerExpired))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = ZC_TimerExpired &rArr; TIMER_TimeoutAction &rArr; PCT_SendMoudleTimeout &rArr; PCT_SendErrorMsg &rArr; PCT_SendMsgToCloud &rArr; SEC_Encrypt &rArr; SEC_EncryptTextByRsa &rArr; rsa_pkcs1_encrypt &rArr; rsa_public &rArr; mpi_exp_mod &rArr; mpi_mod_mpi &rArr; mpi_div_mpi &rArr; mpi_mul_int &rArr; mpi_mul_mpi &rArr; mpi_copy &rArr; mpi_grow
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_TimeoutAction
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_GetTimerStatus
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_StopTimer
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_expired
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Cloudfunc
</UL>

<P><STRONG><a name="[c6]"></a>ZC_TraceData</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, zc_common.o(i.ZC_TraceData))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ZC_TraceData
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_HandleEvent
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZC_RecvDataFromMoudle
</UL>

<P><STRONG><a name="[135]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[182]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[94]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_network
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_ChipInfo
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_write_buf
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_read_buf
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data_processing
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_data_processing
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loopback_tcpc
</UL>

<P><STRONG><a name="[183]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[58]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> zc_adapter.o(i.ZC_Init)
</UL>
<P><STRONG><a name="[184]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[185]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[186]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[13c]"></a>close</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, socket.o(i.close))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = close &rArr; IINCHIP_WRITE &rArr; IINCHIP_SpiSendData &rArr; SPI2_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_WRITE
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
</UL>

<P><STRONG><a name="[a0]"></a>connect</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, socket.o(i.connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = connect &rArr; getSn_IR &rArr; IINCHIP_READ &rArr; IINCHIP_SpiSendData &rArr; SPI2_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSn_IR
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_WRITE
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_ConnectToCloud
</UL>

<P><STRONG><a name="[6f]"></a>crc16_ccitt</STRONG> (Thumb, 18 bytes, Stack size 12 bytes, crc.o(i.crc16_ccitt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = crc16_ccitt &rArr; crc_cal_by_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_cal_by_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_CheckCrc
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVENT_BuildMsg
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVENT_BuildBcMsg
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_ModuleOtaFileChunkMsg
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZC_DealSessionOpt
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVENT_BuildHeartMsg
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVENT_BuildEmptyMsg
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_BuildMessage
</UL>

<P><STRONG><a name="[13e]"></a>crc_cal_by_bit</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, crc.o(i.crc_cal_by_bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = crc_cal_by_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16_ccitt
</UL>

<P><STRONG><a name="[13f]"></a>delay_init</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, systick.o(i.delay_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = delay_init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_CLKSourceConfig
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[84]"></a>delay_ms</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, systick.o(i.delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = delay_ms &rArr; SysTick_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_SetReload
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_GetFlagStatus
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_CounterCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
</UL>

<P><STRONG><a name="[86]"></a>delay_us</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, systick.o(i.delay_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = delay_us &rArr; SysTick_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_SetReload
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_GetFlagStatus
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_CounterCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
</UL>

<P><STRONG><a name="[145]"></a>disconnect</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, socket.o(i.disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = disconnect &rArr; IINCHIP_WRITE &rArr; IINCHIP_SpiSendData &rArr; SPI2_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_WRITE
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loopback_tcpc
</UL>

<P><STRONG><a name="[59]"></a>fputc</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, util.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[57]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> zc_adapter.o(i.ZC_Init)
</UL>
<P><STRONG><a name="[117]"></a>getGAR</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, w5500.o(i.getGAR))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = getGAR &rArr; wiz_read_buf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_read_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_network
</UL>

<P><STRONG><a name="[16c]"></a>getIINCHIP_TxMAX</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, w5500.o(i.getIINCHIP_TxMAX))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
</UL>

<P><STRONG><a name="[114]"></a>getSHAR</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, w5500.o(i.getSHAR))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = getSHAR &rArr; wiz_read_buf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_read_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_network
</UL>

<P><STRONG><a name="[115]"></a>getSIPR</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, w5500.o(i.getSIPR))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = getSIPR &rArr; wiz_read_buf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_read_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_network
</UL>

<P><STRONG><a name="[116]"></a>getSUBR</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, w5500.o(i.getSUBR))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = getSUBR &rArr; wiz_read_buf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_read_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_network
</UL>

<P><STRONG><a name="[13d]"></a>getSn_IR</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, w5500.o(i.getSn_IR))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = getSn_IR &rArr; IINCHIP_READ &rArr; IINCHIP_SpiSendData &rArr; SPI2_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect
</UL>

<P><STRONG><a name="[149]"></a>getSn_RX_RSR</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, w5500.o(i.getSn_RX_RSR))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = getSn_RX_RSR &rArr; IINCHIP_READ &rArr; IINCHIP_SpiSendData &rArr; SPI2_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loopback_tcpc
</UL>

<P><STRONG><a name="[96]"></a>getSn_SR</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, w5500.o(i.getSn_SR))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = getSn_SR &rArr; IINCHIP_READ &rArr; IINCHIP_SpiSendData &rArr; SPI2_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loopback_tcpc
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_SendUdpData
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_ConnectToCloud
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_BcInit
</UL>

<P><STRONG><a name="[14a]"></a>getSn_TX_FSR</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, w5500.o(i.getSn_TX_FSR))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = getSn_TX_FSR &rArr; IINCHIP_READ &rArr; IINCHIP_SpiSendData &rArr; SPI2_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
</UL>

<P><STRONG><a name="[9b]"></a>loopback_tcpc</STRONG> (Thumb, 258 bytes, Stack size 32 bytes, zc_adapter.o(i.loopback_tcpc))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = loopback_tcpc &rArr; PCT_SendCloudAccessMsg1 &rArr; PCT_SendMsgToCloud &rArr; SEC_Encrypt &rArr; SEC_EncryptTextByRsa &rArr; rsa_pkcs1_encrypt &rArr; rsa_public &rArr; mpi_exp_mod &rArr; mpi_mod_mpi &rArr; mpi_div_mpi &rArr; mpi_mul_int &rArr; mpi_mul_mpi &rArr; mpi_copy &rArr; mpi_grow
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSn_SR
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSn_RX_RSR
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disconnect
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_SendCloudAccessMsg1
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_ReconnectCloud
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSG_SendDataToCloud
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSG_RecvDataFromCloud
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZC_Rand
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Cloudfunc
</UL>

<P><STRONG><a name="[46]"></a>main</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = main &rArr; HF_Cloudfunc &rArr; loopback_tcpc &rArr; PCT_SendCloudAccessMsg1 &rArr; PCT_SendMsgToCloud &rArr; SEC_Encrypt &rArr; SEC_EncryptTextByRsa &rArr; rsa_pkcs1_encrypt &rArr; rsa_public &rArr; mpi_exp_mod &rArr; mpi_mod_mpi &rArr; mpi_div_mpi &rArr; mpi_mul_int &rArr; mpi_mul_mpi &rArr; mpi_copy &rArr; mpi_grow
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZC_Init
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZ_SPI_Init
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_W5500
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_GPIO_Configuration
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_WakeUp
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_ReadDataFormFlash
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Cloudfunc
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZ_Config
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Configuration
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_ChipInfo
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dhcp_Task
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[56]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> zc_adapter.o(i.ZC_Init)
</UL>
<P><STRONG><a name="[14d]"></a>mpi_add_abs</STRONG> (Thumb, 228 bytes, Stack size 40 bytes, bignum.o(i.mpi_add_abs))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = mpi_add_abs &rArr; mpi_copy &rArr; mpi_grow
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_grow
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_sub_mpi
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_add_mpi
</UL>

<P><STRONG><a name="[150]"></a>mpi_add_mpi</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, bignum.o(i.mpi_add_mpi))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = mpi_add_mpi &rArr; mpi_sub_abs &rArr; mpi_copy &rArr; mpi_grow
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_sub_abs
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_cmp_abs
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_add_abs
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_private
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_mod_mpi
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_div_mpi
</UL>

<P><STRONG><a name="[151]"></a>mpi_cmp_abs</STRONG> (Thumb, 150 bytes, Stack size 12 bytes, bignum.o(i.mpi_cmp_abs))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mpi_cmp_abs
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_sub_mpi
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_sub_abs
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_div_mpi
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_add_mpi
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montmul
</UL>

<P><STRONG><a name="[153]"></a>mpi_cmp_int</STRONG> (Thumb, 50 bytes, Stack size 100 bytes, bignum.o(i.mpi_cmp_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = mpi_cmp_int &rArr; mpi_cmp_mpi
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_cmp_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_mod_mpi
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_exp_mod
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_div_mpi
</UL>

<P><STRONG><a name="[154]"></a>mpi_cmp_mpi</STRONG> (Thumb, 184 bytes, Stack size 12 bytes, bignum.o(i.mpi_cmp_mpi))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mpi_cmp_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_public
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_private
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_mod_mpi
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_exp_mod
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_div_mpi
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_cmp_int
</UL>

<P><STRONG><a name="[14e]"></a>mpi_copy</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, bignum.o(i.mpi_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mpi_copy &rArr; mpi_grow
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_grow
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_sub_abs
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_mul_mpi
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_exp_mod
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_div_mpi
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_add_abs
</UL>

<P><STRONG><a name="[156]"></a>mpi_div_mpi</STRONG> (Thumb, 1116 bytes, Stack size 72 bytes, bignum.o(i.mpi_div_mpi))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = mpi_div_mpi &rArr; mpi_mul_int &rArr; mpi_mul_mpi &rArr; mpi_copy &rArr; mpi_grow
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_sub_mpi
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_shift_r
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_shift_l
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_mul_int
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_msb
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_lset
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_init
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_grow
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_free
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_copy
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_cmp_mpi
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_cmp_int
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_cmp_abs
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_add_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_mod_mpi
</UL>

<P><STRONG><a name="[15f]"></a>mpi_exp_mod</STRONG> (Thumb, 898 bytes, Stack size 80 bytes, bignum.o(i.mpi_exp_mod))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = mpi_exp_mod &rArr; mpi_mod_mpi &rArr; mpi_div_mpi &rArr; mpi_mul_int &rArr; mpi_mul_mpi &rArr; mpi_copy &rArr; mpi_grow
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_shift_l
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_msb
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_mod_mpi
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_lset
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_init
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_grow
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_free
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_copy
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_cmp_mpi
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_cmp_int
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montred
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montmul
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montg_init
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_public
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_private
</UL>

<P><STRONG><a name="[15e]"></a>mpi_free</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, bignum.o(i.mpi_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mpi_free
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_public
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_private
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_sub_abs
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_mul_mpi
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_exp_mod
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_div_mpi
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_free
</UL>

<P><STRONG><a name="[14f]"></a>mpi_grow</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, bignum.o(i.mpi_grow))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mpi_grow
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_shift_l
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_mul_mpi
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_lset
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_exp_mod
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_div_mpi
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_copy
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_add_abs
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_read_binary
</UL>

<P><STRONG><a name="[157]"></a>mpi_init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, bignum.o(i.mpi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mpi_init
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_public
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_private
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_sub_abs
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_mul_mpi
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_exp_mod
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_div_mpi
</UL>

<P><STRONG><a name="[158]"></a>mpi_lset</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, bignum.o(i.mpi_lset))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mpi_lset &rArr; mpi_grow
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_grow
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_mul_mpi
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_exp_mod
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_div_mpi
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_read_binary
</UL>

<P><STRONG><a name="[161]"></a>mpi_mod_mpi</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, bignum.o(i.mpi_mod_mpi))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = mpi_mod_mpi &rArr; mpi_div_mpi &rArr; mpi_mul_int &rArr; mpi_mul_mpi &rArr; mpi_copy &rArr; mpi_grow
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_sub_mpi
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_div_mpi
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_cmp_mpi
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_cmp_int
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_add_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_private
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_exp_mod
</UL>

<P><STRONG><a name="[159]"></a>mpi_msb</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, bignum.o(i.mpi_msb))
<BR><BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_size
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_shift_l
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_exp_mod
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_div_mpi
</UL>

<P><STRONG><a name="[15d]"></a>mpi_mul_int</STRONG> (Thumb, 32 bytes, Stack size 104 bytes, bignum.o(i.mpi_mul_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = mpi_mul_int &rArr; mpi_mul_mpi &rArr; mpi_copy &rArr; mpi_grow
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_mul_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_div_mpi
</UL>

<P><STRONG><a name="[166]"></a>mpi_mul_mpi</STRONG> (Thumb, 222 bytes, Stack size 208 bytes, bignum.o(i.mpi_mul_mpi))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = mpi_mul_mpi &rArr; mpi_copy &rArr; mpi_grow
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_lset
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_init
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_grow
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_free
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_copy
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_mul_hlp
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_private
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_mul_int
</UL>

<P><STRONG><a name="[106]"></a>mpi_read_binary</STRONG> (Thumb, 162 bytes, Stack size 40 bytes, bignum.o(i.mpi_read_binary))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mpi_read_binary &rArr; mpi_lset &rArr; mpi_grow
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_lset
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_grow
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_public
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_private
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEC_InitRsaContextWithPublicKey
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEC_InitRsaContextWithPrivateKey
</UL>

<P><STRONG><a name="[15a]"></a>mpi_shift_l</STRONG> (Thumb, 206 bytes, Stack size 40 bytes, bignum.o(i.mpi_shift_l))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mpi_shift_l &rArr; mpi_grow
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_msb
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_grow
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_exp_mod
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_div_mpi
</UL>

<P><STRONG><a name="[15c]"></a>mpi_shift_r</STRONG> (Thumb, 150 bytes, Stack size 20 bytes, bignum.o(i.mpi_shift_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mpi_shift_r
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_div_mpi
</UL>

<P><STRONG><a name="[167]"></a>mpi_size</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, bignum.o(i.mpi_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mpi_size
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_msb
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_write_binary
</UL>

<P><STRONG><a name="[152]"></a>mpi_sub_abs</STRONG> (Thumb, 138 bytes, Stack size 112 bytes, bignum.o(i.mpi_sub_abs))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = mpi_sub_abs &rArr; mpi_copy &rArr; mpi_grow
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_init
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_free
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_copy
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_cmp_abs
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_sub_hlp
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_sub_mpi
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_add_mpi
</UL>

<P><STRONG><a name="[15b]"></a>mpi_sub_mpi</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, bignum.o(i.mpi_sub_mpi))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = mpi_sub_mpi &rArr; mpi_sub_abs &rArr; mpi_copy &rArr; mpi_grow
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_sub_abs
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_cmp_abs
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_add_abs
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_private
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_mod_mpi
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_div_mpi
</UL>

<P><STRONG><a name="[168]"></a>mpi_write_binary</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, bignum.o(i.mpi_write_binary))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mpi_write_binary &rArr; mpi_size
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_size
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_public
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_private
</UL>

<P><STRONG><a name="[14b]"></a>recv</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, socket.o(i.recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = recv &rArr; recv_data_processing &rArr; wiz_read_buf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_data_processing
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_WRITE
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loopback_tcpc
</UL>

<P><STRONG><a name="[169]"></a>recv_data_processing</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, w5500.o(i.recv_data_processing))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = recv_data_processing &rArr; wiz_read_buf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_read_buf
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_WRITE
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_READ
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
</UL>

<P><STRONG><a name="[101]"></a>rsa_free</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, rsa.o(i.rsa_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rsa_free &rArr; mpi_free
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_free
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEC_EncryptTextByRsa
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEC_DecryptTextByRsa
</UL>

<P><STRONG><a name="[105]"></a>rsa_init</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, rsa.o(i.rsa_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rsa_init
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEC_InitRsaContextWithPublicKey
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEC_InitRsaContextWithPrivateKey
</UL>

<P><STRONG><a name="[100]"></a>rsa_pkcs1_decrypt</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, rsa.o(i.rsa_pkcs1_decrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = rsa_pkcs1_decrypt &rArr; rsa_public &rArr; mpi_exp_mod &rArr; mpi_mod_mpi &rArr; mpi_div_mpi &rArr; mpi_mul_int &rArr; mpi_mul_mpi &rArr; mpi_copy &rArr; mpi_grow
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_public
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_private
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEC_DecryptTextByRsa
</UL>

<P><STRONG><a name="[104]"></a>rsa_pkcs1_encrypt</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, rsa.o(i.rsa_pkcs1_encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = rsa_pkcs1_encrypt &rArr; rsa_public &rArr; mpi_exp_mod &rArr; mpi_mod_mpi &rArr; mpi_div_mpi &rArr; mpi_mul_int &rArr; mpi_mul_mpi &rArr; mpi_copy &rArr; mpi_grow
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_public
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_private
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEC_EncryptTextByRsa
</UL>

<P><STRONG><a name="[16b]"></a>rsa_private</STRONG> (Thumb, 266 bytes, Stack size 32 bytes, rsa.o(i.rsa_private))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = rsa_private &rArr; mpi_exp_mod &rArr; mpi_mod_mpi &rArr; mpi_div_mpi &rArr; mpi_mul_int &rArr; mpi_mul_mpi &rArr; mpi_copy &rArr; mpi_grow
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_write_binary
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_sub_mpi
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_mul_mpi
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_mod_mpi
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_init
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_free
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_exp_mod
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_cmp_mpi
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_add_mpi
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_read_binary
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_pkcs1_encrypt
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_pkcs1_decrypt
</UL>

<P><STRONG><a name="[16a]"></a>rsa_public</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, rsa.o(i.rsa_public))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = rsa_public &rArr; mpi_exp_mod &rArr; mpi_mod_mpi &rArr; mpi_div_mpi &rArr; mpi_mul_int &rArr; mpi_mul_mpi &rArr; mpi_copy &rArr; mpi_grow
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_write_binary
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_init
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_free
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_exp_mod
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_cmp_mpi
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_read_binary
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_pkcs1_encrypt
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_pkcs1_decrypt
</UL>

<P><STRONG><a name="[a4]"></a>send</STRONG> (Thumb, 218 bytes, Stack size 32 bytes, socket.o(i.send))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = send &rArr; send_data_processing &rArr; wiz_write_buf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data_processing
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSn_TX_FSR
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getIINCHIP_TxMAX
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_WRITE
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_READ
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_SendTcpData
</UL>

<P><STRONG><a name="[16d]"></a>send_data_processing</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, w5500.o(i.send_data_processing))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = send_data_processing &rArr; wiz_write_buf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_write_buf
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_WRITE
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_READ
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
</UL>

<P><STRONG><a name="[a5]"></a>sendto</STRONG> (Thumb, 268 bytes, Stack size 32 bytes, socket.o(i.sendto))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = sendto &rArr; send_data_processing &rArr; wiz_write_buf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data_processing
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getIINCHIP_TxMAX
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_WRITE
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_SendUdpData
</UL>

<P><STRONG><a name="[10f]"></a>setGAR</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, w5500.o(i.setGAR))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = setGAR &rArr; wiz_write_buf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_write_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_network
</UL>

<P><STRONG><a name="[112]"></a>setRCR</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, w5500.o(i.setRCR))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = setRCR &rArr; IINCHIP_WRITE &rArr; IINCHIP_SpiSendData &rArr; SPI2_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_WRITE
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_network
</UL>

<P><STRONG><a name="[111]"></a>setRTR</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, w5500.o(i.setRTR))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = setRTR &rArr; IINCHIP_WRITE &rArr; IINCHIP_SpiSendData &rArr; SPI2_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_WRITE
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_network
</UL>

<P><STRONG><a name="[10d]"></a>setSHAR</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, w5500.o(i.setSHAR))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = setSHAR &rArr; wiz_write_buf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_write_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_network
</UL>

<P><STRONG><a name="[110]"></a>setSIPR</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, w5500.o(i.setSIPR))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = setSIPR &rArr; wiz_write_buf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_write_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_network
</UL>

<P><STRONG><a name="[10e]"></a>setSUBR</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, w5500.o(i.setSUBR))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = setSUBR &rArr; wiz_write_buf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_write_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_network
</UL>

<P><STRONG><a name="[97]"></a>socket</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, socket.o(i.socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = socket &rArr; close &rArr; IINCHIP_WRITE &rArr; IINCHIP_SpiSendData &rArr; SPI2_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_WRITE
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_READ
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_ConnectToCloud
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_BcInit
</UL>

<P><STRONG><a name="[113]"></a>sysinit</STRONG> (Thumb, 302 bytes, Stack size 24 bytes, w5500.o(i.sysinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = sysinit &rArr; IINCHIP_WRITE &rArr; IINCHIP_SpiSendData &rArr; SPI2_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_WRITE
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_network
</UL>

<P><STRONG><a name="[9f]"></a>time_return</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, util.o(i.time_return))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_set
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_expired
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_ConnectToCloud
</UL>

<P><STRONG><a name="[134]"></a>timer_expired</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, zc_adapter.o(i.timer_expired))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_expired
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_return
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZC_TimerExpired
</UL>

<P><STRONG><a name="[a8]"></a>timer_set</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, zc_adapter.o(i.timer_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = timer_set
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_return
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_SetTimer
</UL>

<P><STRONG><a name="[148]"></a>wiz_read_buf</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, w5500.o(i.wiz_read_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = wiz_read_buf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_SpiSendData
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_CSon
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_CSoff
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_data_processing
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSUBR
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSIPR
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSHAR
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getGAR
</UL>

<P><STRONG><a name="[16e]"></a>wiz_write_buf</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, w5500.o(i.wiz_write_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = wiz_write_buf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_SpiSendData
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_CSon
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_CSoff
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data_processing
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSUBR
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSIPR
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSHAR
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setGAR
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[10a]"></a>SetSysClock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[10b]"></a>SetSysClockTo72</STRONG> (Thumb, 212 bytes, Stack size 12 bytes, system_stm32f10x.o(i.SetSysClockTo72))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>

<P><STRONG><a name="[160]"></a>mpi_montg_init</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, bignum.o(i.mpi_montg_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mpi_montg_init
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_exp_mod
</UL>

<P><STRONG><a name="[162]"></a>mpi_montmul</STRONG> (Thumb, 194 bytes, Stack size 64 bytes, bignum.o(i.mpi_montmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = mpi_montmul &rArr; mpi_mul_hlp
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_cmp_abs
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_sub_hlp
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_mul_hlp
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_exp_mod
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montred
</UL>

<P><STRONG><a name="[163]"></a>mpi_montred</STRONG> (Thumb, 42 bytes, Stack size 120 bytes, bignum.o(i.mpi_montred))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = mpi_montred &rArr; mpi_montmul &rArr; mpi_mul_hlp
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montmul
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_exp_mod
</UL>

<P><STRONG><a name="[164]"></a>mpi_mul_hlp</STRONG> (Thumb, 3358 bytes, Stack size 40 bytes, bignum.o(i.mpi_mul_hlp))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mpi_mul_hlp
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_mul_mpi
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montmul
</UL>

<P><STRONG><a name="[165]"></a>mpi_sub_hlp</STRONG> (Thumb, 100 bytes, Stack size 20 bytes, bignum.o(i.mpi_sub_hlp))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mpi_sub_hlp
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_sub_abs
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montmul
</UL>

<P><STRONG><a name="[137]"></a>_fp_digits</STRONG> (Thumb, 326 bytes, Stack size 56 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[136]"></a>_printf_core</STRONG> (Thumb, 1762 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[13a]"></a>_printf_post_padding</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[139]"></a>_printf_pre_padding</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
